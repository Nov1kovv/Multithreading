//Многопоточность - способность процессора обеспечивать одновременное выполнение нескольких потоков внутри одного процесса

//Процесс - экземпляр программы во время выполнения, например отдельное приложение это процесс, хотя в одном приложении может быть и несколько процессов.
//каждый процесс содержит один основной поток. Основной поток должен отрисовывать UI, он обрабатывает пользовательские действия, 
//нажатия на кнопку, свайпы и т.д. Еще Main Thread отвечает за запуск основных компонентов в Android.

//Поток - определенный способ выполнения процесса, набор инструкций которые выполняются последовательно

//Background thread - нужны для запросов в сеть, базу данных,  сложных задач. Для того чтобы не нагружать основной поток и в последствии для быстрой работы приложения.

//Парралелизм - задачи выполняются на разных ядрах процессора одновременно, что ускоряет обработку.

//Создание потока
fun main(){
 val thread = Thread { //Объект класса Thread
   println("Hello world")
 }
thread.start()
}

//Приоритет потока задается от 1 до 10, где 1 это минимальный, а 10 это максимальный. Если у потоков одинаковый приоритет, то операционная система сама решит какой поток выполнить.

//Метод join используется для того, чтобы дождаться завершения выполнения потока. Когда вызываешь join на потоке, текущий поток (например, главный поток) будет блокироваться до тех пор, пока указанный поток не завершит свое выполнение.
fun main() {
    // Создаем новый поток
    val thread = Thread {
        for (i in 1..5) {
            println("Поток: $i")
            Thread.sleep(500) // Задержка работы в 500 мс
        }
    }

    // Запускаем поток
    thread.start()

    // Ждем завершения потока
    thread.join()

    // После завершения потока
    println("Поток завершил выполнение.")
}


//Daemon поток - поток, который работает в фоновом режиме, отличается от обычного потока, тем, что он не блокирует завершение программы. Если все обычные потоки (недемонные) завершили свою работу, JVM завершит работу и daemon-потоки.

//Executor Services

//FixedThreadPool (Пул с фиксированным количеством потоков)
val executor = Executors.newFixedThreadPool(4) // Пул из 4 потоков
executor.submit { println("Task 1") }
executor.submit { println("Task 2") }
executor.shutdown()

//CachedThreadPool (Кэшированный пул потоков), потоки создаются по мере необходимости, но не более чем определенное количество потоков.
//Этот пул подходит для обработки большого количества коротких задач, где важно не терять время на ожидание свободных потоков.
val executor = Executors.newCachedThreadPool()
executor.submit { println("Task 1") }
executor.submit { println("Task 2") }
executor.shutdown()

//SingleThreadExecutor (Один поток)
//Этот пул гарантирует выполнение задач в одном единственном потоке, то есть задачи будут выполняться поочередно.
//Подходит, если нужно выполнить задачи последовательно и гарантировать их порядок.
val executor = Executors.newSingleThreadExecutor()
executor.submit { println("Task 1") }
executor.submit { println("Task 2") }
executor.shutdown()

//ScheduledThreadPoolExecutor (Запланированные задачи)
//Пул для выполнения задач с задержкой или периодичностью.
//Полезен, если нужно выполнять задачи через определённые интервалы времени или с отложенным запуском.
val executor = Executors.newScheduledThreadPool(2)
executor.scheduleAtFixedRate({ println("Task 1") }, 0, 1, TimeUnit.SECONDS)


//Network request через executor service 
fun main() {
    // Создаем ExecutorService с 2 потоками
    val executor = Executors.newFixedThreadPool(2)

    // Запускаем асинхронный сетевой запрос
    executor.submit {
        // Ваша задача: отправка HTTP-запроса
        val result = makeNetworkRequest("https://jsonplaceholder.typicode.com/todos/1")
        
        // После завершения запроса, обработаем результат
        println("Ответ от сервера: $result")
    }

    // Завершаем ExecutorService
    executor.shutdown()
    // Ждем завершения всех задач
    executor.awaitTermination(1, TimeUnit.MINUTES)
}

// Функция для выполнения HTTP-запроса
fun makeNetworkRequest(url: String): String {
    // Создаем URL
    val urlObj = URL(url)
    val connection = urlObj.openConnection() as HttpURLConnection
    connection.requestMethod = "GET"
    
    // Получаем ответ
    val responseCode = connection.responseCode
    return if (responseCode == HttpURLConnection.HTTP_OK) {
        // Читаем данные из потока ответа
        connection.inputStream.bufferedReader().use { it.readText() }
    } else {
        "Ошибка: $responseCode"
    }
}
